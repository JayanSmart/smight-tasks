openapi: 3.0.2
servers:
  - url: /v1
info:
  description: |-
    A go-lang API to manage chores (repeating) and todo items (once-off) 
    for my household.
  version: 0.0.1
  title: SmightTasksAPI
  contact:
    email: jayandrinsmart@gmail.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: task
    description: Everything about a task
  - name: user
    description: Access to tasks
paths:
  /tasks:
    get:
      tags:
        - task
      summary: Return all tags
      description: Return all tags
      operationId: getTasks
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
      security:
        - tasks_auth:
            - 'read:tasks'
    post:
      tags:
        - task
      summary: Add a new once-off task
      description: Add a new task
      operationId: addTask
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '405':
          description: Invalid input
      security:
        - tasks_auth:
            - 'write:tasks'
            - 'read:tasks'
      requestBody:
        description: Create a new task to be completed
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
    put:
      tags:
        - task
      summary: Update an existing task
      description: Update an existing task by Id
      operationId: updateTask
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '405':
          description: Validation exception
      security:
        - tasks_auth:
            - 'write:tasks'
            - 'read:tasks'
      requestBody:
        description: Update an existent task
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
  /tasks/findByStatus:
    get:
      tags:
        - task
      summary: Finds Tasks by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findTasksByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - completed
              - pending
              - in-progress
              - not-done
            default: pending
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid status value
      security:
        - tasks_auth:
            - 'write:tasks'
            - 'read:tasks'
  /pet/findByUser:
    get:
      tags:
        - task
      summary: Finds Tasks by user ID
      description: >-
        Fetch all the tasks currently Assigned to a given user.
      operationId: findTasksByUser
      parameters:
        - name: userID
          in: query
          description: User to filter by
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          description: Invalid tag value
      security:
        - tasks_auth:
            - 'write:tasks'
            - 'read:tasks'
  '/task/{taskId}':
    get:
      tags:
        - task
      summary: Find task by ID
      description: Returns a single task
      operationId: getTaskById
      parameters:
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
      security:
        - api_key: []
        - tasks_auth:
            - 'write:tasks'
            - 'read:tasks'
    post:
      tags:
        - task
      summary: Updates a task in the store with form data
      description: ''
      operationId: updateTaskWithForm
      parameters:
        - name: taskId
          in: path
          description: ID of task that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: title
          in: query
          description: Name of task that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of task that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - tasks_auth:
            - 'write:tasks'
            - 'read:tasks'
    delete:
      tags:
        - task
      summary: Deletes a task
      description: ''
      operationId: deleteTask
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: taskId
          in: path
          description: Task id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - tasks_auth:
            - 'write:tasks'
            - 'read:tasks'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
  # /user/createWithList:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: 'Creates list of users with given input array'
  #     x-swagger-router-controller: UserController
  #     operationId: createUsersWithListInput
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       default:
  #         description: successful operation
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               $ref: '#/components/schemas/User'
  # /user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     description: ''
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: false
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/xml:
  #             schema:
  #               type: string
  #           application/json:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     description: ''
  #     operationId: logoutUser
  #     parameters: []
  #     responses:
  #       default:
  #         description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      x-swagger-router-controller: UserController
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
        phone:
          type: string
          example: 12345
        userStatus:
          type: integer
          format: int32
          example: 1
          description: User Status
      type: object
    Task:
      required:
        - title
        - repeating
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: "Book a dentist appointment"
        repeating:
          type: boolean
          description: True for tasks which are ongoing/repeating
        users:
          type: array
          items:
            $ref:  "#/components/schemas/User"
        status:
          type: string
          description: current status of the task
          enum:
              - completed
              - pending
              - in-progress
              - not-done
      type: object
    ApiResponse:
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      type: object
  requestBodies:
    Task:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
      description: Task object
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
  securitySchemes:
    tasks_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize' #TODO: Update this URL or remove the security.
          scopes:
            'write:tasks': modify tasks in your account
            'read:tasks': read your tasks
    api_key:
      type: apiKey
      name: api_key
      in: header