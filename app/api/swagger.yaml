openapi: 3.0.2
info:
  title: SmightTasksAPI
  description: "A go-lang API to manage chores (repeating) and todo items (once-off)\
    \ \nfor my household."
  contact:
    email: jayandrinsmart@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.0.1
servers:
- url: /v1
tags:
- name: task
  description: Everything about a task
- name: user
  description: Access to tasks
paths:
  /tasks:
    get:
      tags:
      - task
      summary: Return all tags
      description: Return all tags
      operationId: getTasks
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
                x-content-type: application/json
      security:
      - tasks_auth:
        - read:tasks
    put:
      tags:
      - task
      summary: Update an existing task
      description: Update an existing task by Id
      operationId: updateTask
      requestBody:
        description: Update an existent task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        "400":
          description: Invalid ID supplied
        "404":
          description: Task not found
        "405":
          description: Validation exception
      security:
      - tasks_auth:
        - write:tasks
        - read:tasks
    post:
      tags:
      - task
      summary: Add a new once-off task
      description: Add a new task
      operationId: addTask
      requestBody:
        description: Create a new task to be completed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        "405":
          description: Invalid input
      security:
      - tasks_auth:
        - write:tasks
        - read:tasks
  /tasks/findByStatus:
    get:
      tags:
      - task
      summary: Finds Tasks by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findTasksByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: pending
          enum:
          - completed
          - pending
          - in-progress
          - not-done
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
                x-content-type: application/json
        "400":
          description: Invalid status value
      security:
      - tasks_auth:
        - write:tasks
        - read:tasks
  /pet/findByUser:
    get:
      tags:
      - task
      summary: Finds Tasks by user ID
      description: Fetch all the tasks currently Assigned to a given user.
      operationId: findTasksByUser
      parameters:
      - name: userID
        in: query
        description: User to filter by
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
                x-content-type: application/xml
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        "400":
          description: Invalid tag value
      security:
      - tasks_auth:
        - write:tasks
        - read:tasks
  /task/{taskId}:
    get:
      tags:
      - task
      summary: Find task by ID
      description: Returns a single task
      operationId: getTaskById
      parameters:
      - name: taskId
        in: path
        description: ID of task to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        "400":
          description: Invalid ID supplied
        "404":
          description: Task not found
      security:
      - api_key: []
      - tasks_auth:
        - write:tasks
        - read:tasks
    post:
      tags:
      - task
      summary: Updates a task in the store with form data
      operationId: updateTaskWithForm
      parameters:
      - name: taskId
        in: path
        description: ID of task that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: title
        in: query
        description: Name of task that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        description: Status of task that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "405":
          description: Invalid input
      security:
      - tasks_auth:
        - write:tasks
        - read:tasks
    delete:
      tags:
      - task
      summary: Deletes a task
      operationId: deleteTask
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: taskId
        in: path
        description: Task id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
      - tasks_auth:
        - write:tasks
        - read:tasks
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: UserController
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      example:
        firstName: John
        lastName: James
        password: "12345"
        userStatus: 1
        phone: "12345"
        id: 10
        email: john@email.com
        username: theUser
    Task:
      required:
      - repeating
      - title
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Book a dentist appointment
        repeating:
          type: boolean
          description: True for tasks which are ongoing/repeating
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        status:
          type: string
          description: current status of the task
          enum:
          - completed
          - pending
          - in-progress
          - not-done
      example:
        repeating: true
        id: 10
        title: Book a dentist appointment
        users:
        - firstName: John
          lastName: James
          password: "12345"
          userStatus: 1
          phone: "12345"
          id: 10
          email: john@email.com
          username: theUser
        - firstName: John
          lastName: James
          password: "12345"
          userStatus: 1
          phone: "12345"
          id: 10
          email: john@email.com
          username: theUser
        status: completed
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Task:
      description: Task object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    tasks_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore.swagger.io/oauth/authorize
          scopes:
            write:tasks: modify tasks in your account
            read:tasks: read your tasks
    api_key:
      type: apiKey
      name: api_key
      in: header
